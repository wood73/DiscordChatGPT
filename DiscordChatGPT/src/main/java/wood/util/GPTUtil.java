package wood.util;

import com.theokanning.openai.completion.chat.ChatMessage;
import wood.commands.Chat;
import wood.discord_threads.ChatThread;

import java.util.Arrays;
import java.util.List;
import java.util.Locale;

public class GPTUtil {

    final static double priceDavinciToken = .02/1000, priceCurieToken = .002/1000, priceBabbageToken = .0005/1000,
            priceAdaToken = .0004/1000, priceGPT_TurboToken = .002/1000, priceGPT4_8k_promptToken = .03/1000,
            priceGPT4_8k_completionToken = .06/1000;

    /** Valid roles for a ChatGPT message */
    public static final String roleSystem = "system", roleAssistant = "assistant", roleUser = "user";

    /**
     * Approximately counts the number of tokens in the text.
     *
     * Token calculation currently used is imperfect:
     * 1 token = about 4 english chars - https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them
     *
     * @param text The text to count tokens in.
     * @return Approximately the number of tokens in the text.
     */
    public static int countTokens(String text) {
        return (int)Math.ceil(text.length() / 4.0);
    }

    /** @param model The model to check.
     *  @return Case-sensitive check if the model is valid. */
    public static boolean isValidModel(String model) {
        return Arrays.asList(GPTRequest.gptTurbo, GPTRequest.gpt4).contains(model);
    }

    /** @return A ', ' separated string of model names. */
    public static String listModels() {
        return GPTRequest.gptTurbo + ", " + GPTRequest.gpt4;
    }

    /**
     * Converts USD to tokens based on the language model.
     * @param usd The amount of USD to convert to tokens.
     * @param model The language model that the tokens are for.
     * @param tokenType Whether the tokens are for the prompt sent to a LLM, or tokens generated by a LLM,
     *                  or undefined (must be set if the model is GPT-4)
     * @return The number of tokens for the model that equate to the given USD.
     * @throws RuntimeException If the model isn't recognized,
     *                              or if the model is GPT-4, and tokenType is TokenType.UNDEFINED or null
     */
    public static int usdToTokens(double usd, String model, TokenType tokenType) {

        switch(model) {
            case GPTRequest.gpt4:
                if(tokenType == null || tokenType == TokenType.UNDEFINED)
                    throw new RuntimeException("When using GPT-4, tokenType must not be TokenType.UNDEFINED");
                return tokenType == TokenType.PROMPT ? (int) (usd / priceGPT4_8k_promptToken) :
                        (int) (usd / priceGPT4_8k_completionToken);
            case GPTRequest.gptTurbo:
                return (int) (usd / priceGPT_TurboToken);
            default:
                throw new RuntimeException("Invalid model: " + model);
        }
    }

    /**
     * Converts tokens to USD based on the language model.
     * @param tokens The number of tokens to convert to USD.
     * @param model The language model that the tokens are for.
     * @param tokenType Whether the tokens are for the prompt sent to a LLM, or tokens generated by a LLM,
     *                   or undefined (must be set if the model is GPT-4)
     * @return The USD that equates to the given tokens and model.
     * @throws RuntimeException If the model isn't recognized,
     *                              or if the model is GPT-4 and tokenType is either null or TokenType.UNDEFINED
     */
    public static double tokensToUSD(int tokens, String model, TokenType tokenType) {

        switch(model) {
            case GPTRequest.gpt4:
                if(tokenType == null || tokenType == TokenType.UNDEFINED)
                    throw new RuntimeException("When using GPT-4, tokenType must not be TokenType.UNDEFINED");
                else
                    return tokenType == TokenType.PROMPT ? tokens * priceGPT4_8k_promptToken :
                            tokens * priceGPT4_8k_completionToken;
            case GPTRequest.gptTurbo:
                return tokens * priceGPT_TurboToken;
            default:
                throw new RuntimeException("Invalid model: " + model);
        }

    }

    /**
     * @param chatMessage If the content of this ChatMessage object starts with
     *          {@link ChatThread#handleNamePrefix} + any_name + {@link ChatThread#handleNameSuffix}
     *          it'll be removed, then the resulting String will have trim() called.
     */
    public static void removeNamePrefix(ChatMessage chatMessage) {
        String content = chatMessage.getContent();
        if(ChatThread.handleNamePrefix.length() == 0 || ChatThread.handleNameSuffix.length() == 0 ||
            !content.startsWith(ChatThread.handleNamePrefix) || !content.contains(ChatThread.handleNameSuffix)) {
            return;
        }

        // already know prefix is at the start, if the first occurrence of the suffix is at the end, replace all with an
        // empty string, otherwise take the substring after the suffix
        chatMessage.setContent(
                StringUtil.firstOccurrenceOfSubstringIsAtEnd(content, ChatThread.handleNameSuffix) ?
                        "" : content.substring(
                                content.indexOf(ChatThread.handleNameSuffix) + ChatThread.handleNameSuffix.length())
                                .trim());
    }

}
